{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my ETL Project","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#workflow","title":"Workflow","text":"<p>Desenvolvimento do trabalho</p> <pre><code>gantt\ndateFormat  YYYY-MM-DD\ntitle Adding GANTT diagram to mermaid\nexcludes weekdays 2014-01-10\n\nsection Life cycle\nEstrutura            :done,    des1, 2023-11-15,2023-11-16\nExtract               :active,  des2, 2023-11-18, 3d\nTransform             :         des3, 2023-11-22, 5d\nLoad               :         des4, after des3, 5d\n</code></pre>"},{"location":"extract/","title":"Fun\u00e7\u00e3o de transforma\u00e7\u00e3o de dados","text":"<p>Fun\u00e7\u00e3o para ler os arquivos de uma pasta data/input e retornar uma lista de dataframes.</p> <p>args: input_path (str): Caminho da pasta com os arquivos.</p> <p>return: Lista de dataframes.</p> Source code in <code>src/pipeline/extract.py</code> <pre><code>def extract_from_excel(path: str) -&gt; List[pd.DataFrame]:\n\n    \"\"\"\n    Fun\u00e7\u00e3o para ler os arquivos de uma\n    pasta data/input e retornar uma lista de dataframes.\n\n    args: input_path (str): Caminho da pasta com os arquivos.\n\n    return: Lista de dataframes.\n    \"\"\"\n\n    all_files = glob.glob(os.path.join(path, '*.xlsx'))\n\n    data_frame_list = []\n    for file in all_files:\n        data_frame_list.append(pd.read_excel(file))\n\n    return data_frame_list\n</code></pre>"},{"location":"load/","title":"Fun\u00e7\u00e3o de carregamento de dados","text":"<p>Receber um DF e salvar como excel.</p> <p>args: data_frame(pd.DataFrame): dataframe a ser salvo como excel. output_path (str): Caminho onde o arquivo ser\u00e1 salvo. file_name (str): Nome do arquivo a ser salvo.</p> <p>return: \"Arquivo salvo com sucesso.</p> Source code in <code>src/pipeline/load.py</code> <pre><code>def load_excel(\n    data_frame: pd.DataFrame, output_path: str, file_name: str\n) -&gt; str:\n\n    \"\"\"\n    Receber um DF e salvar como excel.\n\n    args:\n    data_frame(pd.DataFrame): dataframe a ser salvo como excel.\n    output_path (str): Caminho onde o arquivo ser\u00e1 salvo.\n    file_name (str): Nome do arquivo a ser salvo.\n\n    return: \"Arquivo salvo com sucesso.\n    \"\"\"\n\n    if not os.path.exists(output_path):\n        os.makedirs(output_path)\n\n    data_frame.to_excel(f'{output_path}/{file_name}.xlsx', index=False)\n    return 'Arquivo salvo com sucesso.'\n</code></pre>"},{"location":"transform/","title":"Fun\u00e7\u00e3o de transforma\u00e7\u00e3o de dados","text":"<p>fun\u00e7\u00e3o para transformar uma lista de dataframes em um \u00fanico dataframe.</p> Source code in <code>src/pipeline/transform.py</code> <pre><code>def contact_data_frames(data_frame_list: List[pd.DataFrame]) -&gt; pd.DataFrame:\n\n    \"\"\"\n    fun\u00e7\u00e3o para transformar uma lista de dataframes em um \u00fanico dataframe.\n    \"\"\"\n\n    return pd.concat(data_frame_list, ignore_index=True)\n</code></pre>"}]}